// Generated from ../LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly WS_IN_NAME = 6;
	public static readonly IDENTIFIER = 7;
	public static readonly DOT = 8;
	public static readonly OPEN_PARENTHESIS = 9;
	public static readonly CLOSE_PARENTHESIS = 10;
	public static readonly COMMA = 11;
	public static readonly INVALID_SEPERATE_CHAR = 12;
	public static readonly WS_IN_BODY_IGNORED = 13;
	public static readonly CASE = 14;
	public static readonly DEFAULT = 15;
	public static readonly MULTI_LINE_TEXT = 16;
	public static readonly ESCAPE_CHARACTER = 17;
	public static readonly INVALID_ESCAPE = 18;
	public static readonly EXPRESSION = 19;
	public static readonly TEMPLATE_REF = 20;
	public static readonly TEXT_SEPARATOR = 21;
	public static readonly TEXT = 22;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "WS_IN_NAME", 
		"NEWLINE_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "WS_IN_BODY", 
		"NEWLINE_IN_BODY", "CASE", "DEFAULT", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", 
		"INVALID_ESCAPE", "EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "WS_IN_NAME", 
		"IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", 
		"INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "CASE", "DEFAULT", "MULTI_LINE_TEXT", 
		"ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", 
		"TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectCaseOrDefault = false; // whethe we are expecting CASE: or DEFAULT:


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 6:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 17:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 18:
			this.CASE_action(_localctx, actionIndex);
			break;

		case 19:
			this.DEFAULT_action(_localctx, actionIndex);
			break;

		case 20:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 21:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 23:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 24:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 25:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 26:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectCaseOrDefault = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private CASE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private DEFAULT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 9:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 15:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 18:
			return this.CASE_sempred(_localctx, predIndex);

		case 19:
			return this.DEFAULT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private CASE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectCaseOrDefault;
		}
		return true;
	}
	private DEFAULT_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectCaseOrDefault;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x18\xFF\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
		"\x04\x1C\t\x1C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x06\x04" +
		"B\n\x04\r\x04\x0E\x04C\x03\x04\x03\x04\x03\x05\x06\x05I\n\x05\r\x05\x0E" +
		"\x05J\x03\x05\x03\x05\x03\x06\x05\x06P\n\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\t\x06\t`\n\t\r\t\x0E\ta\x03\t\x03\t\x03\n\x05\ng\n\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x05\vq\n\v\x03\v\x03\v\x03\v\x07\vv\n" +
		"\v\f\v\x0E\vy\v\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x11\x06\x11\x86\n\x11\r\x11\x0E\x11\x87\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x12\x06\x12\x8F\n\x12\r\x12\x0E\x12\x90\x03" +
		"\x12\x03\x12\x03\x13\x05\x13\x96\n\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x05\x14\xA8\n\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\xBD\n\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16" +
		"\xC7\n\x16\f\x16\x0E\x16\xCA\v\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03" +
		"\x17\x03\x17\x05\x17\xDB\n\x17\x03\x18\x03\x18\x05\x18\xDF\n\x18\x03\x19" +
		"\x03\x19\x07\x19\xE3\n\x19\f\x19\x0E\x19\xE6\v\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x1A\x03\x1A\x03\x1A\x07\x1A\xEE\n\x1A\f\x1A\x0E\x1A\xF1\v\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x06\x1C\xFA\n" +
		"\x1C\r\x1C\x0E\x1C\xFB\x03\x1C\x03\x1C\x03\xC8\x02\x02\x1D\x05\x02\x02" +
		"\x07\x02\x02\t\x02\x03\v\x02\x04\r\x02\x05\x0F\x02\x06\x11\x02\x07\x13" +
		"\x02\b\x15\x02\x02\x17\x02\t\x19\x02\n\x1B\x02\v\x1D\x02\f\x1F\x02\r!" +
		"\x02\x0E#\x02\x0F%\x02\x02\'\x02\x02)\x02\x10+\x02\x11-\x02\x12/\x02\x13" +
		"1\x02\x143\x02\x155\x02\x167\x02\x179\x02\x18\x05\x02\x03\x04\r\x04\x02" +
		"C\\c|\x04\x02&&@@\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x04\x02//aa\x03" +
		"\x02==\x07\x02__ppttvv\x7F\x7F\x06\x02\f\f\x0F\x0F}}\x7F\x7F\x05\x02\f" +
		"\f\x0F\x0F__\n\x02\v\f\x0F\x0F\"\"*+]]__}}\x7F\x7F\t\x02\v\f\x0F\x0F\"" +
		"\"*+]_}}\x7F\x7F\u0112\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x03" +
		"\x13\x03\x02\x02\x02\x03\x15\x03\x02\x02\x02\x03\x17\x03\x02\x02\x02\x03" +
		"\x19\x03\x02\x02\x02\x03\x1B\x03\x02\x02\x02\x03\x1D\x03\x02\x02\x02\x03" +
		"\x1F\x03\x02\x02\x02\x03!\x03\x02\x02\x02\x04#\x03\x02\x02\x02\x04%\x03" +
		"\x02\x02\x02\x04\'\x03\x02\x02\x02\x04)\x03\x02\x02\x02\x04+\x03\x02\x02" +
		"\x02\x04-\x03\x02\x02\x02\x04/\x03\x02\x02\x02\x041\x03\x02\x02\x02\x04" +
		"3\x03\x02\x02\x02\x045\x03\x02\x02\x02\x047\x03\x02\x02\x02\x049\x03\x02" +
		"\x02\x02\x05;\x03\x02\x02\x02\x07=\x03\x02\x02\x02\t?\x03\x02\x02\x02" +
		"\vH\x03\x02\x02\x02\rO\x03\x02\x02\x02\x0FU\x03\x02\x02\x02\x11Y\x03\x02" +
		"\x02\x02\x13_\x03\x02\x02\x02\x15f\x03\x02\x02\x02\x17p\x03\x02\x02\x02" +
		"\x19z\x03\x02\x02\x02\x1B|\x03\x02\x02\x02\x1D~\x03\x02\x02\x02\x1F\x80" +
		"\x03\x02\x02\x02!\x82\x03\x02\x02\x02#\x85\x03\x02\x02\x02%\x8E\x03\x02" +
		"\x02\x02\'\x95\x03\x02\x02\x02)\xA7\x03\x02\x02\x02+\xBC\x03\x02\x02\x02" +
		"-\xC1\x03\x02\x02\x02/\xDA\x03\x02\x02\x021\xDC\x03\x02\x02\x023\xE0\x03" +
		"\x02\x02\x025\xEA\x03\x02\x02\x027\xF5\x03\x02\x02\x029\xF9\x03\x02\x02" +
		"\x02;<\t\x02\x02\x02<\x06\x03\x02\x02\x02=>\x042;\x02>\b\x03\x02\x02\x02" +
		"?A\t\x03\x02\x02@B\n\x04\x02\x02A@\x03\x02\x02\x02BC\x03\x02\x02\x02C" +
		"A\x03\x02\x02\x02CD\x03\x02\x02\x02DE\x03\x02\x02\x02EF\b\x04\x02\x02" +
		"F\n\x03\x02\x02\x02GI\t\x05\x02\x02HG\x03\x02\x02\x02IJ\x03\x02\x02\x02" +
		"JH\x03\x02\x02\x02JK\x03\x02\x02\x02KL\x03\x02\x02\x02LM\b\x05\x02\x02" +
		"M\f\x03\x02\x02\x02NP\x07\x0F\x02\x02ON\x03\x02\x02\x02OP\x03\x02\x02" +
		"\x02PQ\x03\x02\x02\x02QR\x07\f\x02\x02RS\x03\x02\x02\x02ST\b\x06\x02\x02" +
		"T\x0E\x03\x02\x02\x02UV\x07%\x02\x02VW\x03\x02\x02\x02WX\b\x07\x03\x02" +
		"X\x10\x03\x02\x02\x02YZ\x07/\x02\x02Z[\b\b\x04\x02[\\\x03\x02\x02\x02" +
		"\\]\b\b\x05\x02]\x12\x03\x02\x02\x02^`\t\x05\x02\x02_^\x03\x02\x02\x02" +
		"`a\x03\x02\x02\x02a_\x03\x02\x02\x02ab\x03\x02\x02\x02bc\x03\x02\x02\x02" +
		"cd\b\t\x02\x02d\x14\x03\x02\x02\x02eg\x07\x0F\x02\x02fe\x03\x02\x02\x02" +
		"fg\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x07\f\x02\x02ij\x03\x02\x02\x02" +
		"jk\b\n\x06\x02kl\b\n\x07\x02l\x16\x03\x02\x02\x02mq\x05\x05\x02\x02nq" +
		"\x05\x07\x03\x02oq\x07a\x02\x02pm\x03\x02\x02\x02pn\x03\x02\x02\x02po" +
		"\x03\x02\x02\x02qw\x03\x02\x02\x02rv\x05\x05\x02\x02sv\x05\x07\x03\x02" +
		"tv\t\x06\x02\x02ur\x03\x02\x02\x02us\x03\x02\x02\x02ut\x03\x02\x02\x02" +
		"vy\x03\x02\x02\x02wu\x03\x02\x02\x02wx\x03\x02\x02\x02x\x18\x03\x02\x02" +
		"\x02yw\x03\x02\x02\x02z{\x070\x02\x02{\x1A\x03\x02\x02\x02|}\x07*\x02" +
		"\x02}\x1C\x03\x02\x02\x02~\x7F\x07+\x02\x02\x7F\x1E\x03\x02\x02\x02\x80" +
		"\x81\x07.\x02\x02\x81 \x03\x02\x02\x02\x82\x83\t\x07\x02\x02\x83\"\x03" +
		"\x02\x02\x02\x84\x86\t\x05\x02\x02\x85\x84\x03\x02\x02\x02\x86\x87\x03" +
		"\x02\x02\x02\x87\x85\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88\x89\x03" +
		"\x02\x02\x02\x89\x8A\x06\x11\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x8C\b" +
		"\x11\x02\x02\x8C$\x03\x02\x02\x02\x8D\x8F\t\x05\x02\x02\x8E\x8D\x03\x02" +
		"\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x8E\x03\x02\x02\x02\x90\x91\x03\x02" +
		"\x02\x02\x91\x92\x03\x02\x02\x02\x92\x93\b\x12\b\x02\x93&\x03\x02\x02" +
		"\x02\x94\x96\x07\x0F\x02\x02\x95\x94\x03\x02\x02\x02\x95\x96\x03\x02\x02" +
		"\x02\x96\x97\x03\x02\x02\x02\x97\x98\x07\f\x02\x02\x98\x99\b\x13\t\x02" +
		"\x99\x9A\x03\x02\x02\x02\x9A\x9B\b\x13\x06\x02\x9B\x9C\b\x13\x07\x02\x9C" +
		"(\x03\x02\x02\x02\x9D\x9E\x07e\x02\x02\x9E\x9F\x07c\x02\x02\x9F\xA0\x07" +
		"u\x02\x02\xA0\xA1\x07g\x02\x02\xA1\xA8\x07<\x02\x02\xA2\xA3\x07E\x02\x02" +
		"\xA3\xA4\x07C\x02\x02\xA4\xA5\x07U\x02\x02\xA5\xA6\x07G\x02\x02\xA6\xA8" +
		"\x07<\x02\x02\xA7\x9D\x03\x02\x02\x02\xA7\xA2\x03\x02\x02\x02\xA8\xA9" +
		"\x03\x02\x02\x02\xA9\xAA\x06\x14\x03\x02\xAA\xAB\b\x14\n\x02\xAB*\x03" +
		"\x02\x02\x02\xAC\xAD\x07f\x02\x02\xAD\xAE\x07g\x02\x02\xAE\xAF\x07h\x02" +
		"\x02\xAF\xB0\x07c\x02\x02\xB0\xB1\x07w\x02\x02\xB1\xB2\x07n\x02\x02\xB2" +
		"\xB3\x07v\x02\x02\xB3\xBD\x07<\x02\x02\xB4\xB5\x07F\x02\x02\xB5\xB6\x07" +
		"G\x02\x02\xB6\xB7\x07H\x02\x02\xB7\xB8\x07C\x02\x02\xB8\xB9\x07W\x02\x02" +
		"\xB9\xBA\x07N\x02\x02\xBA\xBB\x07V\x02\x02\xBB\xBD\x07<\x02\x02\xBC\xAC" +
		"\x03\x02\x02\x02\xBC\xB4\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBE\xBF" +
		"\x06\x15\x04\x02\xBF\xC0\b\x15\v\x02\xC0,\x03\x02\x02\x02\xC1\xC2\x07" +
		"b\x02\x02\xC2\xC3\x07b\x02\x02\xC3\xC4\x07b\x02\x02\xC4\xC8\x03\x02\x02" +
		"\x02\xC5\xC7\v\x02\x02\x02\xC6\xC5\x03\x02\x02\x02\xC7\xCA\x03\x02\x02" +
		"\x02\xC8\xC9\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC9\xCB\x03\x02\x02" +
		"\x02\xCA\xC8\x03\x02\x02\x02\xCB\xCC\x07b\x02\x02\xCC\xCD\x07b\x02\x02" +
		"\xCD\xCE\x07b\x02\x02\xCE\xCF\x03\x02\x02\x02\xCF\xD0\b\x16\f\x02\xD0" +
		".\x03\x02\x02\x02\xD1\xD2\x07^\x02\x02\xD2\xDB\x07}\x02\x02\xD3\xD4\x07" +
		"^\x02\x02\xD4\xDB\x07]\x02\x02\xD5\xD6\x07^\x02\x02\xD6\xDB\x07^\x02\x02" +
		"\xD7\xD8\x07^\x02\x02\xD8\xD9\t\b\x02\x02\xD9\xDB\b\x17\r\x02\xDA\xD1" +
		"\x03\x02\x02\x02\xDA\xD3\x03\x02\x02\x02\xDA\xD5\x03\x02\x02\x02\xDA\xD7" +
		"\x03\x02\x02\x02\xDB0\x03\x02\x02\x02\xDC\xDE\x07^\x02\x02\xDD\xDF\n\x04" +
		"\x02\x02\xDE\xDD\x03\x02\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF2\x03\x02" +
		"\x02\x02\xE0\xE4\x07}\x02\x02\xE1\xE3\n\t\x02\x02\xE2\xE1\x03\x02\x02" +
		"\x02\xE3\xE6\x03\x02\x02\x02\xE4\xE2\x03\x02\x02\x02\xE4\xE5\x03\x02\x02" +
		"\x02\xE5\xE7\x03\x02\x02\x02\xE6\xE4\x03\x02\x02\x02\xE7\xE8\x07\x7F\x02" +
		"\x02\xE8\xE9\b\x19\x0E\x02\xE94\x03\x02\x02\x02\xEA\xEF\x07]\x02\x02\xEB" +
		"\xEE\n\n\x02\x02\xEC\xEE\x055\x1A\x02\xED\xEB\x03\x02\x02\x02\xED\xEC" +
		"\x03\x02\x02\x02\xEE\xF1\x03\x02\x02\x02\xEF\xED\x03\x02\x02\x02\xEF\xF0" +
		"\x03\x02\x02\x02\xF0\xF2\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF3" +
		"\x07_\x02\x02\xF3\xF4\b\x1A\x0F\x02\xF46\x03\x02\x02\x02\xF5\xF6\t\v\x02" +
		"\x02\xF6\xF7\b\x1B\x10\x02\xF78\x03\x02\x02\x02\xF8\xFA\n\f\x02\x02\xF9" +
		"\xF8\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xF9\x03\x02\x02\x02\xFB" +
		"\xFC\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFE\b\x1C\x11\x02\xFE" +
		":\x03\x02\x02\x02\x19\x02\x03\x04CJOafpuw\x87\x90\x95\xA7\xBC\xC8\xDA" +
		"\xDE\xE4\xED\xEF\xFB\x12\b\x02\x02\x07\x03\x02\x03\b\x02\x07\x04\x02\t" +
		"\x05\x02\x06\x02\x02\t\x04\x02\x03\x13\x03\x03\x14\x04\x03\x15\x05\x03" +
		"\x16\x06\x03\x17\x07\x03\x19\b\x03\x1A\t\x03\x1B\n\x03\x1C\v";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

