// Generated from LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 6;
	public static readonly WS_IN_NAME = 7;
	public static readonly IDENTIFIER = 8;
	public static readonly DOT = 9;
	public static readonly OPEN_PARENTHESIS = 10;
	public static readonly CLOSE_PARENTHESIS = 11;
	public static readonly COMMA = 12;
	public static readonly INVALID_SEPERATE_CHAR = 13;
	public static readonly WS_IN_BODY_IGNORED = 14;
	public static readonly IFELSE = 15;
	public static readonly MULTI_LINE_TEXT = 16;
	public static readonly ESCAPE_CHARACTER = 17;
	public static readonly INVALID_ESCAPE = 18;
	public static readonly EXPRESSION = 19;
	public static readonly TEMPLATE_REF = 20;
	public static readonly TEXT_SEPARATOR = 21;
	public static readonly TEXT = 22;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "WHITESPACE", "COMMENTS", "WS", "NEWLINE", "HASH", 
		"DASH", "INVALID_TOKEN_DEFAULT_MODE", "WS_IN_NAME", "NEWLINE_IN_NAME", 
		"IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", 
		"INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "WS_IN_BODY", "NEWLINE_IN_BODY", 
		"IFELSE", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "INVALID_TOKEN_DEFAULT_MODE", 
		"WS_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "IFELSE", "MULTI_LINE_TEXT", 
		"ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", 
		"TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectIfElse = false;        // whether we are expecting IF/ELSEIF/ELSE


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 7:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 19:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 20:
			this.IFELSE_action(_localctx, actionIndex);
			break;

		case 21:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 22:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 24:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 25:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 26:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 27:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectIfElse = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private IFELSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 17:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 20:
			return this.IFELSE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private IFELSE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectIfElse;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x18\u0104\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
		"\x04\x1C\t\x1C\x04\x1D\t\x1D\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x06\x05F\n\x05\r\x05\x0E\x05G\x03\x05\x03\x05\x03" +
		"\x06\x06\x06M\n\x06\r\x06\x0E\x06N\x03\x06\x03\x06\x03\x07\x05\x07T\n" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x06\vf\n\v\r\v\x0E\vg\x03\v\x03" +
		"\v\x03\f\x05\fm\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x05" +
		"\rw\n\r\x03\r\x03\r\x03\r\x07\r|\n\r\f\r\x0E\r\x7F\v\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13" +
		"\x06\x13\x8C\n\x13\r\x13\x0E\x13\x8D\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x14\x06\x14\x95\n\x14\r\x14\x0E\x14\x96\x03\x14\x03\x14\x03\x15\x05\x15" +
		"\x9C\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x05\x16\xC2\n\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x17\x07\x17\xCC\n\x17\f\x17\x0E\x17\xCF\v\x17\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\xE0\n\x18\x03\x19" +
		"\x03\x19\x05\x19\xE4\n\x19\x03\x1A\x03\x1A\x07\x1A\xE8\n\x1A\f\x1A\x0E" +
		"\x1A\xEB\v\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x07\x1B" +
		"\xF3\n\x1B\f\x1B\x0E\x1B\xF6\v\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1D\x06\x1D\xFF\n\x1D\r\x1D\x0E\x1D\u0100\x03\x1D\x03" +
		"\x1D\x03\xCD\x02\x02\x1E\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x03\r" +
		"\x02\x04\x0F\x02\x05\x11\x02\x06\x13\x02\x07\x15\x02\b\x17\x02\t\x19\x02" +
		"\x02\x1B\x02\n\x1D\x02\v\x1F\x02\f!\x02\r#\x02\x0E%\x02\x0F\'\x02\x10" +
		")\x02\x02+\x02\x02-\x02\x11/\x02\x121\x02\x133\x02\x145\x02\x157\x02\x16" +
		"9\x02\x17;\x02\x18\x05\x02\x03\x04\r\x04\x02C\\c|\x06\x02\v\v\"\"\xA2" +
		"\xA2\uFF01\uFF01\x04\x02&&@@\x04\x02\f\f\x0F\x0F\x04\x02//aa\x03\x02=" +
		"=\x07\x02__ppttvv\x7F\x7F\x06\x02\f\f\x0F\x0F}}\x7F\x7F\x05\x02\f\f\x0F" +
		"\x0F__\n\x02\v\f\x0F\x0F\"\"*+]]__}}\x7F\x7F\t\x02\v\f\x0F\x0F\"\"*+]" +
		"_}}\x7F\x7F\u0119\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x03\x17\x03\x02\x02\x02\x03\x19\x03\x02\x02\x02\x03\x1B" +
		"\x03\x02\x02\x02\x03\x1D\x03\x02\x02\x02\x03\x1F\x03\x02\x02\x02\x03!" +
		"\x03\x02\x02\x02\x03#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x04\'\x03\x02" +
		"\x02\x02\x04)\x03\x02\x02\x02\x04+\x03\x02\x02\x02\x04-\x03\x02\x02\x02" +
		"\x04/\x03\x02\x02\x02\x041\x03\x02\x02\x02\x043\x03\x02\x02\x02\x045\x03" +
		"\x02\x02\x02\x047\x03\x02\x02\x02\x049\x03\x02\x02\x02\x04;\x03\x02\x02" +
		"\x02\x05=\x03\x02\x02\x02\x07?\x03\x02\x02\x02\tA\x03\x02\x02\x02\vC\x03" +
		"\x02\x02\x02\rL\x03\x02\x02\x02\x0FS\x03\x02\x02\x02\x11Y\x03\x02\x02" +
		"\x02\x13]\x03\x02\x02\x02\x15b\x03\x02\x02\x02\x17e\x03\x02\x02\x02\x19" +
		"l\x03\x02\x02\x02\x1Bv\x03\x02\x02\x02\x1D\x80\x03\x02\x02\x02\x1F\x82" +
		"\x03\x02\x02\x02!\x84\x03\x02\x02\x02#\x86\x03\x02\x02\x02%\x88\x03\x02" +
		"\x02\x02\'\x8B\x03\x02\x02\x02)\x94\x03\x02\x02\x02+\x9B\x03\x02\x02\x02" +
		"-\xC1\x03\x02\x02\x02/\xC6\x03\x02\x02\x021\xDF\x03\x02\x02\x023\xE1\x03" +
		"\x02\x02\x025\xE5\x03\x02\x02\x027\xEF\x03\x02\x02\x029\xFA\x03\x02\x02" +
		"\x02;\xFE\x03\x02\x02\x02=>\t\x02\x02\x02>\x06\x03\x02\x02\x02?@\x042" +
		";\x02@\b\x03\x02\x02\x02AB\t\x03\x02\x02B\n\x03\x02\x02\x02CE\t\x04\x02" +
		"\x02DF\n\x05\x02\x02ED\x03\x02\x02\x02FG\x03\x02\x02\x02GE\x03\x02\x02" +
		"\x02GH\x03\x02\x02\x02HI\x03\x02\x02\x02IJ\b\x05\x02\x02J\f\x03\x02\x02" +
		"\x02KM\x05\t\x04\x02LK\x03\x02\x02\x02MN\x03\x02\x02\x02NL\x03\x02\x02" +
		"\x02NO\x03\x02\x02\x02OP\x03\x02\x02\x02PQ\b\x06\x02\x02Q\x0E\x03\x02" +
		"\x02\x02RT\x07\x0F\x02\x02SR\x03\x02\x02\x02ST\x03\x02\x02\x02TU\x03\x02" +
		"\x02\x02UV\x07\f\x02\x02VW\x03\x02\x02\x02WX\b\x07\x02\x02X\x10\x03\x02" +
		"\x02\x02YZ\x07%\x02\x02Z[\x03\x02\x02\x02[\\\b\b\x03\x02\\\x12\x03\x02" +
		"\x02\x02]^\x07/\x02\x02^_\b\t\x04\x02_`\x03\x02\x02\x02`a\b\t\x05\x02" +
		"a\x14\x03\x02\x02\x02bc\v\x02\x02\x02c\x16\x03\x02\x02\x02df\x05\t\x04" +
		"\x02ed\x03\x02\x02\x02fg\x03\x02\x02\x02ge\x03\x02\x02\x02gh\x03\x02\x02" +
		"\x02hi\x03\x02\x02\x02ij\b\v\x02\x02j\x18\x03\x02\x02\x02km\x07\x0F\x02" +
		"\x02lk\x03\x02\x02\x02lm\x03\x02\x02\x02mn\x03\x02\x02\x02no\x07\f\x02" +
		"\x02op\x03\x02\x02\x02pq\b\f\x06\x02qr\b\f\x07\x02r\x1A\x03\x02\x02\x02" +
		"sw\x05\x05\x02\x02tw\x05\x07\x03\x02uw\x07a\x02\x02vs\x03\x02\x02\x02" +
		"vt\x03\x02\x02\x02vu\x03\x02\x02\x02w}\x03\x02\x02\x02x|\x05\x05\x02\x02" +
		"y|\x05\x07\x03\x02z|\t\x06\x02\x02{x\x03\x02\x02\x02{y\x03\x02\x02\x02" +
		"{z\x03\x02\x02\x02|\x7F\x03\x02\x02\x02}{\x03\x02\x02\x02}~\x03\x02\x02" +
		"\x02~\x1C\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x80\x81\x070\x02\x02\x81" +
		"\x1E\x03\x02\x02\x02\x82\x83\x07*\x02\x02\x83 \x03\x02\x02\x02\x84\x85" +
		"\x07+\x02\x02\x85\"\x03\x02\x02\x02\x86\x87\x07.\x02\x02\x87$\x03\x02" +
		"\x02\x02\x88\x89\t\x07\x02\x02\x89&\x03\x02\x02\x02\x8A\x8C\x05\t\x04" +
		"\x02\x8B\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8B\x03\x02\x02" +
		"\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x90\x06\x13\x02" +
		"\x02\x90\x91\x03\x02\x02\x02\x91\x92\b\x13\x02\x02\x92(\x03\x02\x02\x02" +
		"\x93\x95\x05\t\x04\x02\x94\x93\x03\x02\x02\x02\x95\x96\x03\x02\x02\x02" +
		"\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02" +
		"\x98\x99\b\x14\b\x02\x99*\x03\x02\x02\x02\x9A\x9C\x07\x0F\x02\x02\x9B" +
		"\x9A\x03\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D" +
		"\x9E\x07\f\x02\x02\x9E\x9F\b\x15\t\x02\x9F\xA0\x03\x02\x02\x02\xA0\xA1" +
		"\b\x15\x06\x02\xA1\xA2\b\x15\x07\x02\xA2,\x03\x02\x02\x02\xA3\xA4\x07" +
		"k\x02\x02\xA4\xA5\x07h\x02\x02\xA5\xC2\x07<\x02\x02\xA6\xA7\x07K\x02\x02" +
		"\xA7\xA8\x07H\x02\x02\xA8\xC2\x07<\x02\x02\xA9\xAA\x07g\x02\x02\xAA\xAB" +
		"\x07n\x02\x02\xAB\xAC\x07u\x02\x02\xAC\xAD\x07g\x02\x02\xAD\xAE\x07k\x02" +
		"\x02\xAE\xAF\x07h\x02\x02\xAF\xC2\x07<\x02\x02\xB0\xB1\x07G\x02\x02\xB1" +
		"\xB2\x07N\x02\x02\xB2\xB3\x07U\x02\x02\xB3\xB4\x07G\x02\x02\xB4\xB5\x07" +
		"K\x02\x02\xB5\xB6\x07H\x02\x02\xB6\xC2\x07<\x02\x02\xB7\xB8\x07g\x02\x02" +
		"\xB8\xB9\x07n\x02\x02\xB9\xBA\x07u\x02\x02\xBA\xBB\x07g\x02\x02\xBB\xC2" +
		"\x07<\x02\x02\xBC\xBD\x07G\x02\x02\xBD\xBE\x07N\x02\x02\xBE\xBF\x07U\x02" +
		"\x02\xBF\xC0\x07G\x02\x02\xC0\xC2\x07<\x02\x02\xC1\xA3\x03\x02\x02\x02" +
		"\xC1\xA6\x03\x02\x02\x02\xC1\xA9\x03\x02\x02\x02\xC1\xB0\x03\x02\x02\x02" +
		"\xC1\xB7\x03\x02\x02\x02\xC1\xBC\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02" +
		"\xC3\xC4\x06\x16\x03\x02\xC4\xC5\b\x16\n\x02\xC5.\x03\x02\x02\x02\xC6" +
		"\xC7\x07b\x02\x02\xC7\xC8\x07b\x02\x02\xC8\xC9\x07b\x02\x02\xC9\xCD\x03" +
		"\x02\x02\x02\xCA\xCC\v\x02\x02\x02\xCB\xCA\x03\x02\x02\x02\xCC\xCF\x03" +
		"\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCE\xD0\x03" +
		"\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\xD0\xD1\x07b\x02\x02\xD1\xD2\x07" +
		"b\x02\x02\xD2\xD3\x07b\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD5\b\x17\v" +
		"\x02\xD50\x03\x02\x02\x02\xD6\xD7\x07^\x02\x02\xD7\xE0\x07}\x02\x02\xD8" +
		"\xD9\x07^\x02\x02\xD9\xE0\x07]\x02\x02\xDA\xDB\x07^\x02\x02\xDB\xE0\x07" +
		"^\x02\x02\xDC\xDD\x07^\x02\x02\xDD\xDE\t\b\x02\x02\xDE\xE0\b\x18\f\x02" +
		"\xDF\xD6\x03\x02\x02\x02\xDF\xD8\x03\x02\x02\x02\xDF\xDA\x03\x02\x02\x02" +
		"\xDF\xDC\x03\x02\x02\x02\xE02\x03\x02\x02\x02\xE1\xE3\x07^\x02\x02\xE2" +
		"\xE4\n\x05\x02\x02\xE3\xE2\x03\x02\x02\x02\xE3\xE4\x03\x02\x02\x02\xE4" +
		"4\x03\x02\x02\x02\xE5\xE9\x07}\x02\x02\xE6\xE8\n\t\x02\x02\xE7\xE6\x03" +
		"\x02\x02\x02\xE8\xEB\x03\x02\x02\x02\xE9\xE7\x03\x02\x02\x02\xE9\xEA\x03" +
		"\x02\x02\x02\xEA\xEC\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEC\xED\x07" +
		"\x7F\x02\x02\xED\xEE\b\x1A\r\x02\xEE6\x03\x02\x02\x02\xEF\xF4\x07]\x02" +
		"\x02\xF0\xF3\n\n\x02\x02\xF1\xF3\x057\x1B\x02\xF2\xF0\x03\x02\x02\x02" +
		"\xF2\xF1\x03\x02\x02\x02\xF3\xF6\x03\x02\x02\x02\xF4\xF2\x03\x02\x02\x02" +
		"\xF4\xF5\x03\x02\x02\x02\xF5\xF7\x03\x02\x02\x02\xF6\xF4\x03\x02\x02\x02" +
		"\xF7\xF8\x07_\x02\x02\xF8\xF9\b\x1B\x0E\x02\xF98\x03\x02\x02\x02\xFA\xFB" +
		"\t\v\x02\x02\xFB\xFC\b\x1C\x0F\x02\xFC:\x03\x02\x02\x02\xFD\xFF\n\f\x02" +
		"\x02\xFE\xFD\x03\x02\x02\x02\xFF\u0100\x03\x02\x02\x02\u0100\xFE\x03\x02" +
		"\x02\x02\u0100\u0101\x03\x02\x02\x02\u0101\u0102\x03\x02\x02\x02\u0102" +
		"\u0103\b\x1D\x10\x02\u0103<\x03\x02\x02\x02\x18\x02\x03\x04GNSglv{}\x8D" +
		"\x96\x9B\xC1\xCD\xDF\xE3\xE9\xF2\xF4\u0100\x11\b\x02\x02\x07\x03\x02\x03" +
		"\t\x02\x07\x04\x02\t\x05\x02\x06\x02\x02\t\x04\x02\x03\x15\x03\x03\x16" +
		"\x04\x03\x17\x05\x03\x18\x06\x03\x1A\x07\x03\x1B\b\x03\x1C\t\x03\x1D\n";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

