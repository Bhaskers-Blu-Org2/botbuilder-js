// Generated from Expression.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly NUMBER = 18;
	public static readonly WHITESPACE = 19;
	public static readonly IDENTIFIER = 20;
	public static readonly NEWLINE = 21;
	public static readonly STRING = 22;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"LETTER", "DIGIT", "NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", "'<>'", "'<'", 
		"'<='", "'>'", "'>='", "'('", "')'", "'.'", "'['", "']'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "NUMBER", "WHITESPACE", "IDENTIFIER", 
		"NEWLINE", "STRING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expression.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return ExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x18\x8B\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07" +
		"\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x06" +
		"\x15`\n\x15\r\x15\x0E\x15a\x03\x15\x03\x15\x06\x15f\n\x15\r\x15\x0E\x15" +
		"g\x05\x15j\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x05\x17" +
		"r\n\x17\x03\x17\x03\x17\x03\x17\x07\x17w\n\x17\f\x17\x0E\x17z\v\x17\x03" +
		"\x18\x05\x18}\n\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x07" +
		"\x19\x85\n\x19\f\x19\x0E\x19\x88\v\x19\x03\x19\x03\x19\x02\x02\x02\x1A" +
		"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02" +
		"\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D" +
		"\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x02\'\x02\x02)\x02\x14+\x02" +
		"\x15-\x02\x16/\x02\x171\x02\x18\x03\x02\x07\x04\x02C\\c|\x03\x022;\x04" +
		"\x02\v\v\"\"\x04\x02//aa\x03\x02))\x91\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x033\x03\x02\x02\x02\x055\x03" +
		"\x02\x02\x02\x077\x03\x02\x02\x02\t9\x03\x02\x02\x02\v;\x03\x02\x02\x02" +
		"\r>\x03\x02\x02\x02\x0FA\x03\x02\x02\x02\x11D\x03\x02\x02\x02\x13F\x03" +
		"\x02\x02\x02\x15I\x03\x02\x02\x02\x17K\x03\x02\x02\x02\x19N\x03\x02\x02" +
		"\x02\x1BP\x03\x02\x02\x02\x1DR\x03\x02\x02\x02\x1FT\x03\x02\x02\x02!V" +
		"\x03\x02\x02\x02#X\x03\x02\x02\x02%Z\x03\x02\x02\x02\'\\\x03\x02\x02\x02" +
		")_\x03\x02\x02\x02+k\x03\x02\x02\x02-q\x03\x02\x02\x02/|\x03\x02\x02\x02" +
		"1\x82\x03\x02\x02\x0234\x07,\x02\x024\x04\x03\x02\x02\x0256\x071\x02\x02" +
		"6\x06\x03\x02\x02\x0278\x07-\x02\x028\b\x03\x02\x02\x029:\x07/\x02\x02" +
		":\n\x03\x02\x02\x02;<\x07?\x02\x02<=\x07?\x02\x02=\f\x03\x02\x02\x02>" +
		"?\x07#\x02\x02?@\x07?\x02\x02@\x0E\x03\x02\x02\x02AB\x07>\x02\x02BC\x07" +
		"@\x02\x02C\x10\x03\x02\x02\x02DE\x07>\x02\x02E\x12\x03\x02\x02\x02FG\x07" +
		">\x02\x02GH\x07?\x02\x02H\x14\x03\x02\x02\x02IJ\x07@\x02\x02J\x16\x03" +
		"\x02\x02\x02KL\x07@\x02\x02LM\x07?\x02\x02M\x18\x03\x02\x02\x02NO\x07" +
		"*\x02\x02O\x1A\x03\x02\x02\x02PQ\x07+\x02\x02Q\x1C\x03\x02\x02\x02RS\x07" +
		"0\x02\x02S\x1E\x03\x02\x02\x02TU\x07]\x02\x02U \x03\x02\x02\x02VW\x07" +
		"_\x02\x02W\"\x03\x02\x02\x02XY\x07.\x02\x02Y$\x03\x02\x02\x02Z[\t\x02" +
		"\x02\x02[&\x03\x02\x02\x02\\]\t\x03\x02\x02](\x03\x02\x02\x02^`\x05\'" +
		"\x14\x02_^\x03\x02\x02\x02`a\x03\x02\x02\x02a_\x03\x02\x02\x02ab\x03\x02" +
		"\x02\x02bi\x03\x02\x02\x02ce\x070\x02\x02df\x05\'\x14\x02ed\x03\x02\x02" +
		"\x02fg\x03\x02\x02\x02ge\x03\x02\x02\x02gh\x03\x02\x02\x02hj\x03\x02\x02" +
		"\x02ic\x03\x02\x02\x02ij\x03\x02\x02\x02j*\x03\x02\x02\x02kl\t\x04\x02" +
		"\x02lm\x03\x02\x02\x02mn\b\x16\x02\x02n,\x03\x02\x02\x02or\x05%\x13\x02" +
		"pr\x07a\x02\x02qo\x03\x02\x02\x02qp\x03\x02\x02\x02rx\x03\x02\x02\x02" +
		"sw\x05%\x13\x02tw\x05\'\x14\x02uw\t\x05\x02\x02vs\x03\x02\x02\x02vt\x03" +
		"\x02\x02\x02vu\x03\x02\x02\x02wz\x03\x02\x02\x02xv\x03\x02\x02\x02xy\x03" +
		"\x02\x02\x02y.\x03\x02\x02\x02zx\x03\x02\x02\x02{}\x07\x0F\x02\x02|{\x03" +
		"\x02\x02\x02|}\x03\x02\x02\x02}~\x03\x02\x02\x02~\x7F\x07\f\x02\x02\x7F" +
		"\x80\x03\x02\x02\x02\x80\x81\b\x18\x02\x02\x810\x03\x02\x02\x02\x82\x86" +
		"\x07)\x02\x02\x83\x85\n\x06\x02\x02\x84\x83\x03\x02\x02\x02\x85\x88\x03" +
		"\x02\x02\x02\x86\x84\x03\x02\x02\x02\x86\x87\x03\x02\x02\x02\x87\x89\x03" +
		"\x02\x02\x02\x88\x86\x03\x02\x02\x02\x89\x8A\x07)\x02\x02\x8A2\x03\x02" +
		"\x02\x02\v\x02agiqvx|\x86\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionLexer.__ATN) {
			ExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));
		}

		return ExpressionLexer.__ATN;
	}

}

