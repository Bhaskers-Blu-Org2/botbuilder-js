// Generated from .\LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly WS_IN_NAME = 6;
	public static readonly IDENTIFIER = 7;
	public static readonly DOT = 8;
	public static readonly OPEN_PARENTHESIS = 9;
	public static readonly CLOSE_PARENTHESIS = 10;
	public static readonly COMMA = 11;
	public static readonly WS_IN_BODY_IGNORED = 12;
	public static readonly CASE = 13;
	public static readonly DEFAULT = 14;
	public static readonly MULTI_LINE_TEXT = 15;
	public static readonly EXPRESSION = 16;
	public static readonly TEMPLATE_REF = 17;
	public static readonly TEXT_SEPARATOR = 18;
	public static readonly TEXT = 19;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "WS_IN_NAME", 
		"NEWLINE_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "WS_IN_BODY_IGNORED", "WS_IN_BODY", "NEWLINE_IN_BODY", "CASE", 
		"DEFAULT", "MULTI_LINE_TEXT", "EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", 
		"TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "WS_IN_NAME", 
		"IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", 
		"WS_IN_BODY_IGNORED", "CASE", "DEFAULT", "MULTI_LINE_TEXT", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectCaseOrDefault = false; // whethe we are expecting CASE: or DEFAULT:


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 6:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 16:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 17:
			this.CASE_action(_localctx, actionIndex);
			break;

		case 18:
			this.DEFAULT_action(_localctx, actionIndex);
			break;

		case 19:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 20:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 21:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 22:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 23:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectCaseOrDefault = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private CASE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private DEFAULT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 14:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 17:
			return this.CASE_sempred(_localctx, predIndex);

		case 18:
			return this.DEFAULT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private CASE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectCaseOrDefault;
		}
		return true;
	}
	private DEFAULT_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectCaseOrDefault;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x15\xE8\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x06\x04<\n\x04\r\x04\x0E\x04=\x03\x04\x03\x04\x03" +
		"\x05\x06\x05C\n\x05\r\x05\x0E\x05D\x03\x05\x03\x05\x03\x06\x05\x06J\n" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\t\x06\tZ\n\t\r\t\x0E\t[\x03\t\x03\t\x03" +
		"\n\x05\na\n\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x05\vk\n" +
		"\v\x03\v\x03\v\x03\v\x07\vp\n\v\f\v\x0E\vs\v\v\x03\f\x03\f\x03\r\x03\r" +
		"\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x06\x10~\n\x10\r\x10\x0E\x10" +
		"\x7F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x06\x11\x87\n\x11\r\x11\x0E" +
		"\x11\x88\x03\x11\x03\x11\x03\x12\x05\x12\x8E\n\x12\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\xA0\n\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14" +
		"\xB5\n\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x07\x15\xBF\n\x15\f\x15\x0E\x15\xC2\v\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x07\x16\xCC\n\x16\f\x16\x0E\x16" +
		"\xCF\v\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x07\x17\xD7" +
		"\n\x17\f\x17\x0E\x17\xDA\v\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x18\x03\x19\x06\x19\xE3\n\x19\r\x19\x0E\x19\xE4\x03\x19\x03\x19\x03" +
		"\xC0\x02\x02\x1A\x05\x02\x02\x07\x02\x02\t\x02\x03\v\x02\x04\r\x02\x05" +
		"\x0F\x02\x06\x11\x02\x07\x13\x02\b\x15\x02\x02\x17\x02\t\x19\x02\n\x1B" +
		"\x02\v\x1D\x02\f\x1F\x02\r!\x02\x0E#\x02\x02%\x02\x02\'\x02\x0F)\x02\x10" +
		"+\x02\x11-\x02\x12/\x02\x131\x02\x143\x02\x15\x05\x02\x03\x04\n\x04\x02" +
		"C\\c|\x04\x02&&@@\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x04\x02//aa\x06" +
		"\x02\f\f\x0F\x0F}}\x7F\x7F\x05\x02\f\f\x0F\x0F__\n\x02\v\f\x0F\x0F\"\"" +
		"*+]]__}}\x7F\x7F\xF7\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
		"\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x03\x13" +
		"\x03\x02\x02\x02\x03\x15\x03\x02\x02\x02\x03\x17\x03\x02\x02\x02\x03\x19" +
		"\x03\x02\x02\x02\x03\x1B\x03\x02\x02\x02\x03\x1D\x03\x02\x02\x02\x03\x1F" +
		"\x03\x02\x02\x02\x04!\x03\x02\x02\x02\x04#\x03\x02\x02\x02\x04%\x03\x02" +
		"\x02\x02\x04\'\x03\x02\x02\x02\x04)\x03\x02\x02\x02\x04+\x03\x02\x02\x02" +
		"\x04-\x03\x02\x02\x02\x04/\x03\x02\x02\x02\x041\x03\x02\x02\x02\x043\x03" +
		"\x02\x02\x02\x055\x03\x02\x02\x02\x077\x03\x02\x02\x02\t9\x03\x02\x02" +
		"\x02\vB\x03\x02\x02\x02\rI\x03\x02\x02\x02\x0FO\x03\x02\x02\x02\x11S\x03" +
		"\x02\x02\x02\x13Y\x03\x02\x02\x02\x15`\x03\x02\x02\x02\x17j\x03\x02\x02" +
		"\x02\x19t\x03\x02\x02\x02\x1Bv\x03\x02\x02\x02\x1Dx\x03\x02\x02\x02\x1F" +
		"z\x03\x02\x02\x02!}\x03\x02\x02\x02#\x86\x03\x02\x02\x02%\x8D\x03\x02" +
		"\x02\x02\'\x9F\x03\x02\x02\x02)\xB4\x03\x02\x02\x02+\xB9\x03\x02\x02\x02" +
		"-\xC9\x03\x02\x02\x02/\xD3\x03\x02\x02\x021\xDE\x03\x02\x02\x023\xE2\x03" +
		"\x02\x02\x0256\t\x02\x02\x026\x06\x03\x02\x02\x0278\x042;\x028\b\x03\x02" +
		"\x02\x029;\t\x03\x02\x02:<\n\x04\x02\x02;:\x03\x02\x02\x02<=\x03\x02\x02" +
		"\x02=;\x03\x02\x02\x02=>\x03\x02\x02\x02>?\x03\x02\x02\x02?@\b\x04\x02" +
		"\x02@\n\x03\x02\x02\x02AC\t\x05\x02\x02BA\x03\x02\x02\x02CD\x03\x02\x02" +
		"\x02DB\x03\x02\x02\x02DE\x03\x02\x02\x02EF\x03\x02\x02\x02FG\b\x05\x02" +
		"\x02G\f\x03\x02\x02\x02HJ\x07\x0F\x02\x02IH\x03\x02\x02\x02IJ\x03\x02" +
		"\x02\x02JK\x03\x02\x02\x02KL\x07\f\x02\x02LM\x03\x02\x02\x02MN\b\x06\x02" +
		"\x02N\x0E\x03\x02\x02\x02OP\x07%\x02\x02PQ\x03\x02\x02\x02QR\b\x07\x03" +
		"\x02R\x10\x03\x02\x02\x02ST\x07/\x02\x02TU\b\b\x04\x02UV\x03\x02\x02\x02" +
		"VW\b\b\x05\x02W\x12\x03\x02\x02\x02XZ\t\x05\x02\x02YX\x03\x02\x02\x02" +
		"Z[\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\]\x03\x02\x02" +
		"\x02]^\b\t\x02\x02^\x14\x03\x02\x02\x02_a\x07\x0F\x02\x02`_\x03\x02\x02" +
		"\x02`a\x03\x02\x02\x02ab\x03\x02\x02\x02bc\x07\f\x02\x02cd\x03\x02\x02" +
		"\x02de\b\n\x06\x02ef\b\n\x07\x02f\x16\x03\x02\x02\x02gk\x05\x05\x02\x02" +
		"hk\x05\x07\x03\x02ik\x07a\x02\x02jg\x03\x02\x02\x02jh\x03\x02\x02\x02" +
		"ji\x03\x02\x02\x02kq\x03\x02\x02\x02lp\x05\x05\x02\x02mp\x05\x07\x03\x02" +
		"np\t\x06\x02\x02ol\x03\x02\x02\x02om\x03\x02\x02\x02on\x03\x02\x02\x02" +
		"ps\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02r\x18\x03\x02\x02" +
		"\x02sq\x03\x02\x02\x02tu\x070\x02\x02u\x1A\x03\x02\x02\x02vw\x07*\x02" +
		"\x02w\x1C\x03\x02\x02\x02xy\x07+\x02\x02y\x1E\x03\x02\x02\x02z{\x07.\x02" +
		"\x02{ \x03\x02\x02\x02|~\t\x05\x02\x02}|\x03\x02\x02\x02~\x7F\x03\x02" +
		"\x02\x02\x7F}\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80\x81\x03\x02" +
		"\x02\x02\x81\x82\x06\x10\x02\x02\x82\x83\x03\x02\x02\x02\x83\x84\b\x10" +
		"\x02\x02\x84\"\x03\x02\x02\x02\x85\x87\t\x05\x02\x02\x86\x85\x03\x02\x02" +
		"\x02\x87\x88\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02" +
		"\x02\x89\x8A\x03\x02\x02\x02\x8A\x8B\b\x11\b\x02\x8B$\x03\x02\x02\x02" +
		"\x8C\x8E\x07\x0F\x02\x02\x8D\x8C\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02" +
		"\x8E\x8F\x03\x02\x02\x02\x8F\x90\x07\f\x02\x02\x90\x91\b\x12\t\x02\x91" +
		"\x92\x03\x02\x02\x02\x92\x93\b\x12\x06\x02\x93\x94\b\x12\x07\x02\x94&" +
		"\x03\x02\x02\x02\x95\x96\x07e\x02\x02\x96\x97\x07c\x02\x02\x97\x98\x07" +
		"u\x02\x02\x98\x99\x07g\x02\x02\x99\xA0\x07<\x02\x02\x9A\x9B\x07E\x02\x02" +
		"\x9B\x9C\x07C\x02\x02\x9C\x9D\x07U\x02\x02\x9D\x9E\x07G\x02\x02\x9E\xA0" +
		"\x07<\x02\x02\x9F\x95\x03\x02\x02\x02\x9F\x9A\x03\x02\x02\x02\xA0\xA1" +
		"\x03\x02\x02\x02\xA1\xA2\x06\x13\x03\x02\xA2\xA3\b\x13\n\x02\xA3(\x03" +
		"\x02\x02\x02\xA4\xA5\x07f\x02\x02\xA5\xA6\x07g\x02\x02\xA6\xA7\x07h\x02" +
		"\x02\xA7\xA8\x07c\x02\x02\xA8\xA9\x07w\x02\x02\xA9\xAA\x07n\x02\x02\xAA" +
		"\xAB\x07v\x02\x02\xAB\xB5\x07<\x02\x02\xAC\xAD\x07F\x02\x02\xAD\xAE\x07" +
		"G\x02\x02\xAE\xAF\x07H\x02\x02\xAF\xB0\x07C\x02\x02\xB0\xB1\x07W\x02\x02" +
		"\xB1\xB2\x07N\x02\x02\xB2\xB3\x07V\x02\x02\xB3\xB5\x07<\x02\x02\xB4\xA4" +
		"\x03\x02\x02\x02\xB4\xAC\x03\x02\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB7" +
		"\x06\x14\x04\x02\xB7\xB8\b\x14\v\x02\xB8*\x03\x02\x02\x02\xB9\xBA\x07" +
		"b\x02\x02\xBA\xBB\x07b\x02\x02\xBB\xBC\x07b\x02\x02\xBC\xC0\x03\x02\x02" +
		"\x02\xBD\xBF\v\x02\x02\x02\xBE\xBD\x03\x02\x02\x02\xBF\xC2\x03\x02\x02" +
		"\x02\xC0\xC1\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC1\xC3\x03\x02\x02" +
		"\x02\xC2\xC0\x03\x02\x02\x02\xC3\xC4\x07b\x02\x02\xC4\xC5\x07b\x02\x02" +
		"\xC5\xC6\x07b\x02\x02\xC6\xC7\x03\x02\x02\x02\xC7\xC8\b\x15\f\x02\xC8" +
		",\x03\x02\x02\x02\xC9\xCD\x07}\x02\x02\xCA\xCC\n\x07\x02\x02\xCB\xCA\x03" +
		"\x02\x02\x02\xCC\xCF\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCD\xCE\x03" +
		"\x02\x02\x02\xCE\xD0\x03\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\xD0\xD1\x07" +
		"\x7F\x02\x02\xD1\xD2\b\x16\r\x02\xD2.\x03\x02\x02\x02\xD3\xD8\x07]\x02" +
		"\x02\xD4\xD7\n\b\x02\x02\xD5\xD7\x05/\x17\x02\xD6\xD4\x03\x02\x02\x02" +
		"\xD6\xD5\x03\x02\x02\x02\xD7\xDA\x03\x02\x02\x02\xD8\xD6\x03\x02\x02\x02" +
		"\xD8\xD9\x03\x02\x02\x02\xD9\xDB\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02" +
		"\xDB\xDC\x07_\x02\x02\xDC\xDD\b\x17\x0E\x02\xDD0\x03\x02\x02\x02\xDE\xDF" +
		"\t\t\x02\x02\xDF\xE0\b\x18\x0F\x02\xE02\x03\x02\x02\x02\xE1\xE3\n\t\x02" +
		"\x02\xE2\xE1\x03\x02\x02\x02\xE3\xE4\x03\x02\x02\x02\xE4\xE2\x03\x02\x02" +
		"\x02\xE4\xE5\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE7\b\x19\x10" +
		"\x02\xE74\x03\x02\x02\x02\x17\x02\x03\x04=DI[`joq\x7F\x88\x8D\x9F\xB4" +
		"\xC0\xCD\xD6\xD8\xE4\x11\b\x02\x02\x07\x03\x02\x03\b\x02\x07\x04\x02\t" +
		"\x05\x02\x06\x02\x02\t\x04\x02\x03\x12\x03\x03\x13\x04\x03\x14\x05\x03" +
		"\x15\x06\x03\x16\x07\x03\x17\b\x03\x18\t\x03\x19\n";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

