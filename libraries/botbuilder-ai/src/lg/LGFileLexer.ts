// Generated from LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly WS_IN_NAME = 6;
	public static readonly IDENTIFIER = 7;
	public static readonly DOT = 8;
	public static readonly OPEN_PARENTHESIS = 9;
	public static readonly CLOSE_PARENTHESIS = 10;
	public static readonly COMMA = 11;
	public static readonly WS_IN_BODY_IGNORED = 12;
	public static readonly CASE = 13;
	public static readonly DEFAULT = 14;
	public static readonly MULTI_LINE_TEXT = 15;
	public static readonly ESCAPE_CHARACTER = 16;
	public static readonly INVALID_ESCAPE = 17;
	public static readonly EXPRESSION = 18;
	public static readonly TEMPLATE_REF = 19;
	public static readonly TEXT_SEPARATOR = 20;
	public static readonly TEXT = 21;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "WS_IN_NAME", 
		"NEWLINE_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "WS_IN_BODY_IGNORED", "WS_IN_BODY", "NEWLINE_IN_BODY", "CASE", 
		"DEFAULT", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "WS_IN_NAME", 
		"IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", 
		"WS_IN_BODY_IGNORED", "CASE", "DEFAULT", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", 
		"INVALID_ESCAPE", "EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectCaseOrDefault = false; // whethe we are expecting CASE: or DEFAULT:


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 6:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 16:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 17:
			this.CASE_action(_localctx, actionIndex);
			break;

		case 18:
			this.DEFAULT_action(_localctx, actionIndex);
			break;

		case 19:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 20:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 22:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 23:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 24:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 25:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectCaseOrDefault = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private CASE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private DEFAULT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 9:
			 this.ignoreWS = false; this.expectCaseOrDefault = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 14:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 17:
			return this.CASE_sempred(_localctx, predIndex);

		case 18:
			return this.DEFAULT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private CASE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectCaseOrDefault;
		}
		return true;
	}
	private DEFAULT_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectCaseOrDefault;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x17\xFB\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x06\x04@\n\x04\r\x04" +
		"\x0E\x04A\x03\x04\x03\x04\x03\x05\x06\x05G\n\x05\r\x05\x0E\x05H\x03\x05" +
		"\x03\x05\x03\x06\x05\x06N\n\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x06\t^\n" +
		"\t\r\t\x0E\t_\x03\t\x03\t\x03\n\x05\ne\n\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x05\vo\n\v\x03\v\x03\v\x03\v\x07\vt\n\v\f\v\x0E\v" +
		"w\v\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x06\x10\x82\n\x10\r\x10\x0E\x10\x83\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x11\x06\x11\x8B\n\x11\r\x11\x0E\x11\x8C\x03\x11\x03\x11\x03\x12\x05\x12" +
		"\x92\n\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05" +
		"\x13\xA4\n\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x05\x14\xB9\n\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\xC3\n\x15\f\x15\x0E\x15\xC6" +
		"\v\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\xD7\n" +
		"\x16\x03\x17\x03\x17\x05\x17\xDB\n\x17\x03\x18\x03\x18\x07\x18\xDF\n\x18" +
		"\f\x18\x0E\x18\xE2\v\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19" +
		"\x07\x19\xEA\n\x19\f\x19\x0E\x19\xED\v\x19\x03\x19\x03\x19\x03\x19\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1B\x06\x1B\xF6\n\x1B\r\x1B\x0E\x1B\xF7\x03\x1B" +
		"\x03\x1B\x03\xC4\x02\x02\x1C\x05\x02\x02\x07\x02\x02\t\x02\x03\v\x02\x04" +
		"\r\x02\x05\x0F\x02\x06\x11\x02\x07\x13\x02\b\x15\x02\x02\x17\x02\t\x19" +
		"\x02\n\x1B\x02\v\x1D\x02\f\x1F\x02\r!\x02\x0E#\x02\x02%\x02\x02\'\x02" +
		"\x0F)\x02\x10+\x02\x11-\x02\x12/\x02\x131\x02\x143\x02\x155\x02\x167\x02" +
		"\x17\x05\x02\x03\x04\f\x04\x02C\\c|\x04\x02&&@@\x04\x02\f\f\x0F\x0F\x04" +
		"\x02\v\v\"\"\x04\x02//aa\x07\x02__ppttvv\x7F\x7F\x06\x02\f\f\x0F\x0F}" +
		"}\x7F\x7F\x05\x02\f\f\x0F\x0F__\n\x02\v\f\x0F\x0F\"\"*+]]__}}\x7F\x7F" +
		"\t\x02\v\f\x0F\x0F\"\"*+]_}}\x7F\x7F\u010E\x02\t\x03\x02\x02\x02\x02\v" +
		"\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x03\x13\x03\x02\x02\x02\x03\x15\x03\x02\x02\x02\x03\x17" +
		"\x03\x02\x02\x02\x03\x19\x03\x02\x02\x02\x03\x1B\x03\x02\x02\x02\x03\x1D" +
		"\x03\x02\x02\x02\x03\x1F\x03\x02\x02\x02\x04!\x03\x02\x02\x02\x04#\x03" +
		"\x02\x02\x02\x04%\x03\x02\x02\x02\x04\'\x03\x02\x02\x02\x04)\x03\x02\x02" +
		"\x02\x04+\x03\x02\x02\x02\x04-\x03\x02\x02\x02\x04/\x03\x02\x02\x02\x04" +
		"1\x03\x02\x02\x02\x043\x03\x02\x02\x02\x045\x03\x02\x02\x02\x047\x03\x02" +
		"\x02\x02\x059\x03\x02\x02\x02\x07;\x03\x02\x02\x02\t=\x03\x02\x02\x02" +
		"\vF\x03\x02\x02\x02\rM\x03\x02\x02\x02\x0FS\x03\x02\x02\x02\x11W\x03\x02" +
		"\x02\x02\x13]\x03\x02\x02\x02\x15d\x03\x02\x02\x02\x17n\x03\x02\x02\x02" +
		"\x19x\x03\x02\x02\x02\x1Bz\x03\x02\x02\x02\x1D|\x03\x02\x02\x02\x1F~\x03" +
		"\x02\x02\x02!\x81\x03\x02\x02\x02#\x8A\x03\x02\x02\x02%\x91\x03\x02\x02" +
		"\x02\'\xA3\x03\x02\x02\x02)\xB8\x03\x02\x02\x02+\xBD\x03\x02\x02\x02-" +
		"\xD6\x03\x02\x02\x02/\xD8\x03\x02\x02\x021\xDC\x03\x02\x02\x023\xE6\x03" +
		"\x02\x02\x025\xF1\x03\x02\x02\x027\xF5\x03\x02\x02\x029:\t\x02\x02\x02" +
		":\x06\x03\x02\x02\x02;<\x042;\x02<\b\x03\x02\x02\x02=?\t\x03\x02\x02>" +
		"@\n\x04\x02\x02?>\x03\x02\x02\x02@A\x03\x02\x02\x02A?\x03\x02\x02\x02" +
		"AB\x03\x02\x02\x02BC\x03\x02\x02\x02CD\b\x04\x02\x02D\n\x03\x02\x02\x02" +
		"EG\t\x05\x02\x02FE\x03\x02\x02\x02GH\x03\x02\x02\x02HF\x03\x02\x02\x02" +
		"HI\x03\x02\x02\x02IJ\x03\x02\x02\x02JK\b\x05\x02\x02K\f\x03\x02\x02\x02" +
		"LN\x07\x0F\x02\x02ML\x03\x02\x02\x02MN\x03\x02\x02\x02NO\x03\x02\x02\x02" +
		"OP\x07\f\x02\x02PQ\x03\x02\x02\x02QR\b\x06\x02\x02R\x0E\x03\x02\x02\x02" +
		"ST\x07%\x02\x02TU\x03\x02\x02\x02UV\b\x07\x03\x02V\x10\x03\x02\x02\x02" +
		"WX\x07/\x02\x02XY\b\b\x04\x02YZ\x03\x02\x02\x02Z[\b\b\x05\x02[\x12\x03" +
		"\x02\x02\x02\\^\t\x05\x02\x02]\\\x03\x02\x02\x02^_\x03\x02\x02\x02_]\x03" +
		"\x02\x02\x02_`\x03\x02\x02\x02`a\x03\x02\x02\x02ab\b\t\x02\x02b\x14\x03" +
		"\x02\x02\x02ce\x07\x0F\x02\x02dc\x03\x02\x02\x02de\x03\x02\x02\x02ef\x03" +
		"\x02\x02\x02fg\x07\f\x02\x02gh\x03\x02\x02\x02hi\b\n\x06\x02ij\b\n\x07" +
		"\x02j\x16\x03\x02\x02\x02ko\x05\x05\x02\x02lo\x05\x07\x03\x02mo\x07a\x02" +
		"\x02nk\x03\x02\x02\x02nl\x03\x02\x02\x02nm\x03\x02\x02\x02ou\x03\x02\x02" +
		"\x02pt\x05\x05\x02\x02qt\x05\x07\x03\x02rt\t\x06\x02\x02sp\x03\x02\x02" +
		"\x02sq\x03\x02\x02\x02sr\x03\x02\x02\x02tw\x03\x02\x02\x02us\x03\x02\x02" +
		"\x02uv\x03\x02\x02\x02v\x18\x03\x02\x02\x02wu\x03\x02\x02\x02xy\x070\x02" +
		"\x02y\x1A\x03\x02\x02\x02z{\x07*\x02\x02{\x1C\x03\x02\x02\x02|}\x07+\x02" +
		"\x02}\x1E\x03\x02\x02\x02~\x7F\x07.\x02\x02\x7F \x03\x02\x02\x02\x80\x82" +
		"\t\x05\x02\x02\x81\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x81" +
		"\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85\x86" +
		"\x06\x10\x02\x02\x86\x87\x03\x02\x02\x02\x87\x88\b\x10\x02\x02\x88\"\x03" +
		"\x02\x02\x02\x89\x8B\t\x05\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03" +
		"\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8E\x03" +
		"\x02\x02\x02\x8E\x8F\b\x11\b\x02\x8F$\x03\x02\x02\x02\x90\x92\x07\x0F" +
		"\x02\x02\x91\x90\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x93\x03\x02" +
		"\x02\x02\x93\x94\x07\f\x02\x02\x94\x95\b\x12\t\x02\x95\x96\x03\x02\x02" +
		"\x02\x96\x97\b\x12\x06\x02\x97\x98\b\x12\x07\x02\x98&\x03\x02\x02\x02" +
		"\x99\x9A\x07e\x02\x02\x9A\x9B\x07c\x02\x02\x9B\x9C\x07u\x02\x02\x9C\x9D" +
		"\x07g\x02\x02\x9D\xA4\x07<\x02\x02\x9E\x9F\x07E\x02\x02\x9F\xA0\x07C\x02" +
		"\x02\xA0\xA1\x07U\x02\x02\xA1\xA2\x07G\x02\x02\xA2\xA4\x07<\x02\x02\xA3" +
		"\x99\x03\x02\x02\x02\xA3\x9E\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5" +
		"\xA6\x06\x13\x03\x02\xA6\xA7\b\x13\n\x02\xA7(\x03\x02\x02\x02\xA8\xA9" +
		"\x07f\x02\x02\xA9\xAA\x07g\x02\x02\xAA\xAB\x07h\x02\x02\xAB\xAC\x07c\x02" +
		"\x02\xAC\xAD\x07w\x02\x02\xAD\xAE\x07n\x02\x02\xAE\xAF\x07v\x02\x02\xAF" +
		"\xB9\x07<\x02\x02\xB0\xB1\x07F\x02\x02\xB1\xB2\x07G\x02\x02\xB2\xB3\x07" +
		"H\x02\x02\xB3\xB4\x07C\x02\x02\xB4\xB5\x07W\x02\x02\xB5\xB6\x07N\x02\x02" +
		"\xB6\xB7\x07V\x02\x02\xB7\xB9\x07<\x02\x02\xB8\xA8\x03\x02\x02\x02\xB8" +
		"\xB0\x03\x02\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA\xBB\x06\x14\x04\x02\xBB" +
		"\xBC\b\x14\v\x02\xBC*\x03\x02\x02\x02\xBD\xBE\x07b\x02\x02\xBE\xBF\x07" +
		"b\x02\x02\xBF\xC0\x07b\x02\x02\xC0\xC4\x03\x02\x02\x02\xC1\xC3\v\x02\x02" +
		"\x02\xC2\xC1\x03\x02\x02\x02\xC3\xC6\x03\x02\x02\x02\xC4\xC5\x03\x02\x02" +
		"\x02\xC4\xC2\x03\x02\x02\x02\xC5\xC7\x03\x02\x02\x02\xC6\xC4\x03\x02\x02" +
		"\x02\xC7\xC8\x07b\x02\x02\xC8\xC9\x07b\x02\x02\xC9\xCA\x07b\x02\x02\xCA" +
		"\xCB\x03\x02\x02\x02\xCB\xCC\b\x15\f\x02\xCC,\x03\x02\x02\x02\xCD\xCE" +
		"\x07^\x02\x02\xCE\xD7\x07}\x02\x02\xCF\xD0\x07^\x02\x02\xD0\xD7\x07]\x02" +
		"\x02\xD1\xD2\x07^\x02\x02\xD2\xD7\x07^\x02\x02\xD3\xD4\x07^\x02\x02\xD4" +
		"\xD5\t\x07\x02\x02\xD5\xD7\b\x16\r\x02\xD6\xCD\x03\x02\x02\x02\xD6\xCF" +
		"\x03\x02\x02\x02\xD6\xD1\x03\x02\x02\x02\xD6\xD3\x03\x02\x02\x02\xD7." +
		"\x03\x02\x02\x02\xD8\xDA\x07^\x02\x02\xD9\xDB\n\x04\x02\x02\xDA\xD9\x03" +
		"\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDB0\x03\x02\x02\x02\xDC\xE0\x07" +
		"}\x02\x02\xDD\xDF\n\b\x02\x02\xDE\xDD\x03\x02\x02\x02\xDF\xE2\x03\x02" +
		"\x02\x02\xE0\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02\xE1\xE3\x03\x02" +
		"\x02\x02\xE2\xE0\x03\x02\x02\x02\xE3\xE4\x07\x7F\x02\x02\xE4\xE5\b\x18" +
		"\x0E\x02\xE52\x03\x02\x02\x02\xE6\xEB\x07]\x02\x02\xE7\xEA\n\t\x02\x02" +
		"\xE8\xEA\x053\x19\x02\xE9\xE7\x03\x02\x02\x02\xE9\xE8\x03\x02\x02\x02" +
		"\xEA\xED\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEB\xEC\x03\x02\x02\x02" +
		"\xEC\xEE\x03\x02\x02\x02\xED\xEB\x03\x02\x02\x02\xEE\xEF\x07_\x02\x02" +
		"\xEF\xF0\b\x19\x0F\x02\xF04\x03\x02\x02\x02\xF1\xF2\t\n\x02\x02\xF2\xF3" +
		"\b\x1A\x10\x02\xF36\x03\x02\x02\x02\xF4\xF6\n\v\x02\x02\xF5\xF4\x03\x02" +
		"\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\xF5\x03\x02\x02\x02\xF7\xF8\x03\x02" +
		"\x02\x02\xF8\xF9\x03\x02\x02\x02\xF9\xFA\b\x1B\x11\x02\xFA8\x03\x02\x02" +
		"\x02\x19\x02\x03\x04AHM_dnsu\x83\x8C\x91\xA3\xB8\xC4\xD6\xDA\xE0\xE9\xEB" +
		"\xF7\x12\b\x02\x02\x07\x03\x02\x03\b\x02\x07\x04\x02\t\x05\x02\x06\x02" +
		"\x02\t\x04\x02\x03\x12\x03\x03\x13\x04\x03\x14\x05\x03\x15\x06\x03\x16" +
		"\x07\x03\x18\b\x03\x19\t\x03\x1A\n\x03\x1B\v";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

