// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

const { ActivityHandler, TurnContext } = require('botbuilder');
const { ActivityTypes } = require('botframework-schema');

class RootBot extends ActivityHandler {
    constructor(conversationState, conversationIdFactory, skillClient) {
        super();
        if (!conversationState) throw new Error('[RootBot]: Missing parameter. conversationState is required');
        if (!conversationIdFactory) throw new Error('[RootBot]: Missing parameter. conversationIdFactory is required');
        if (!skillClient) throw new Error('[RootBot]: Missing parameter. skillClient is required');

        this.conversationState = conversationState;
        this.conversationIdFactory = conversationIdFactory;
        this.skillClient = skillClient;
        this.activeSkillProperty = this.conversationState.createProperty('activeSkillProperty');
        this.botFrameworkSkill = {};
        this.botFrameworkSkill.id = process.env.SkillId;
        this.botFrameworkSkill.appId = process.env.SkillAppId;
        this.botFrameworkSkill.skillEndpoint = process.env.SkillEndpoint;


        // See https://aka.ms/about-bot-activity-message to learn more about the message and other activity types.
        this.onMessage(async (context, next) => {
            // Try to get the active skill
            let currentSkill = await this.activeSkillProperty.get(context, null);

            if (currentSkill) {
                // Send the activity to the skill
                await this.sendToSkill(context, currentSkill);
            } else {
                if (context.activity.text.toLowerCase() === 'skill') {
                    await context.sendActivity('Got it, connecting you to the skill...');

                    // Set active skill
                    currentSkill = this.botFrameworkSkill;
                    this.activeSkillProperty.set(context, currentSkill);

                    // Send the activity to the skill
                    await this.sendToSkill(context, currentSkill);
                } else {
                    await context.sendActivity('Me no nothin\'. Say \'skill\' and I\'ll patch you through');
                }
            }

            // By calling next() you ensure that the next BotHandler is run.
            await next();
        });

        this.onUnrecognizedActivityType(async (context, next) => {
            // Handle EndOfConversation returned by the skill.
            if (context.activity.type === ActivityTypes.EndOfConversation) {
                // forget skill invocation
                this.activeSkillProperty.set(context, undefined);

                // We are back at the root
                await context.sendActivity('Back in the root bot. Say \'skill\' and I\'ll patch you through');

                // Save conversation state
                await this.conversationState.saveChanges(context, true);
            }

            // By calling next() you ensure that the next BotHandler is run.
            await next();
        });

        this.onMembersAdded(async (context, next) => {
            const membersAdded = context.activity.membersAdded;
            for (let cnt = 0; cnt < membersAdded.length; ++cnt) {
                if (membersAdded[cnt].id !== context.activity.recipient.id) {
                    await context.sendActivity('Hello and welcome!');
                }
            }

            // By calling next() you ensure that the next BotHandler is run.
            await next();
        });

        this.onDialog(async (context, next) => {
            // Save any state changes. The load happened during the execution of the Dialog.
            await this.conversationState.saveChanges(context, false);

            // By calling next() you ensure that the next BotHandler is run.
            await next();
        });
    }

    async sendToSkill(context, botFrameworkSkill) {
        // NOTE: Always SaveChanges() before calling a skill so that any activity generated by the skill
        // will have access to current accurate state.
        await this.conversationState.saveChanges(context, true);

        // route the activity to the skill
        await this.skillClient.postToSkill(process.env.MicrosoftAppId, botFrameworkSkill, process.env.SkillHostEndpoint, context.activity);
    }
}

module.exports.RootBot = RootBot;
